from src.py.bpyx import *


# $ <>==========================================<>
# $ <>          Generate black TO case          <>
# $ <>==========================================<>

if Template.caseType == "Rounded":
    caseDepth = Template.caseWidth * 0.57
    rootObject = Mesh.Arc(
        Template.caseWidth / 2,
        "-125deg",
        "125deg",
        Template.caseHeight,
        material=Template.caseMaterial,
    )
    Modifier.Bevel(rootObject, "EDGES", "OFFSET", caseDepth / 40, 3, "ANGLE", "30deg")
    Material.Smooth(rootObject)

elif Template.caseType == "Square":
    caseDepth = Template.caseDepth
    rootObject = Mesh.Rectangle(
        caseDepth,
        Template.caseWidth,
        Template.caseHeight,
        material=Template.caseMaterial,
    )
    if Template.caseHoleRadius != 0:
        cutter = Mesh.Circle(
            Template.caseHoleRadius * 2,
            Template.caseHoleRadius * 2,
            caseDepth * 2,
        )
        Object.RotateTo(cutter, y="90deg")
        Object.MoveTo(cutter, x=-caseDepth, z=Template.caseHeight * (2 / 3))
        Modifier.Boolean(rootObject, cutter)
        Global.delete(cutter)
    Modifier.Bevel(
        rootObject,
        width=caseDepth / 40,
    )
elif Template.caseType == "Obround":
    caseDepth = Template.caseDepth
    rootObject = Mesh.Obround(
        caseDepth / 2,
        Template.caseWidth,
        Template.caseHeight - caseDepth / 10,
        material=Template.caseMaterial,
    )
    Object.RotateBy(rootObject, z="90deg")
    Object.MoveBy(rootObject, z=caseDepth / 10)
    Modifier.Bevel(rootObject, width=caseDepth / 5, segments=3, limit_method="ANGLE")
    Material.Smooth(rootObject)
    bpy_ring = Mesh.Obround(
        (caseDepth / 2) + caseDepth / 10,
        Template.caseWidth + caseDepth / 10,
        caseDepth * (3 / 10),
        material=Template.caseMaterial,
    )
    Object.RotateBy(bpy_ring, z="90deg")
# $ <>==========================================<>
# $ <>          Generate TO backplate           <>
# $ <>==========================================<>


if Template.backplateThickness != 0 and Template.backplateHeight != 0:
    backplate = Mesh.Rectangle(
        Template.backplateHeight,
        Template.caseWidth,
        material=Template.pinMaterial,
    )
    Object.RotateTo(backplate, y="90deg")
    with Edit(backplate) as edit:
        if Template.backplateCutCorners != 0:
            edit.deselectAll()
            edit.selectVerts(lambda co: co.z > 0)
            edit.bevel(
                "VERTICES",
                offset=Template.backplateCutCorners,
                offset_type="WIDTH",
            )
        edit.selectAll()
        edit.extrude(x=-Template.backplateThickness)
    Object.MoveTo(backplate, x=-caseDepth / 2, z=Template.backplateHeight / 2)
    if Template.backplateHoleRadius:
        cutter = Mesh.Circle(
            Template.backplateHoleRadius * 2,
            Template.backplateHoleRadius * 2,
            (Template.backplateThickness + caseDepth) * 2,
        )
        Object.RotateTo(cutter, y="90deg")
        Object.MoveBy(cutter, x=-caseDepth - Template.backplateThickness)
        Object.MoveBy(
            cutter,
            z=Template.caseHeight
            + (Template.backplateHeight - Template.caseHeight) * 0.5,
        )
        Modifier.Boolean(backplate, cutter)
        Global.delete(cutter)
        Global.selectOnly(backplate)
    Modifier.Bevel(
        backplate,
        width=Template.backplateThickness / 20,
        limit_method="ANGLE",
        angle_limit="30deg",
    )

# $ <>==========================================<>
# $ <>              Resistor label              <>
# $ <>==========================================<>

Mesh.Text(
    Template.label,
    Template.fontPath,
    Template.fontSize,
    Template.fontDepth,
    material=Template.fontMaterial,
)
Transform.rotateZ("90deg")
Transform.translate(0, 0, Template.caseHeight)

Object.join(rootObject, *Global.getAll())

# $ <>==========================================<>
# $ <>          Generate case pins              <>
# $ <>==========================================<>

if not Template.bend:
    if Template.pinCount:
        Object.MoveTo(
            rootObject,
            z=Template.pinLength,
        )
        if Template.pinStyle == "T-shape":
            pinObject = Mesh.Rectangle(
                Template.pinThickness,
                Template.pinWidth,
                0,
                material=Template.pinMaterial,
            )
            boostZ = numpy.clip([Template.pinBoostZ], 0, Template.pinHeight)[0]
            with Edit(pinObject) as edit:
                edit.extrude(z=boostZ)
                edit.extrude(z=0)
                edit.ScaleBy(y=Template.pinBoostWidth / Template.pinWidth)
                edit.extrude(z=Template.pinHeight - boostZ)
        elif Template.pinStyle == "Rectangle":
            pinObject = Mesh.Rectangle(
                Template.pinThickness,
                Template.pinWidth,
                Template.pinLength,
                material=Template.pinMaterial,
            )
        elif Template.pinStyle == "Round":
            pinObject = Mesh.Circle(
                Template.pinThickness,
                Template.pinWidth,
                Template.pinLength,
                material=Template.pinMaterial,
            )
            Material.Smooth(pinObject)
        Object.MoveTo(
            pinObject,
            x=Template.pinOffset,
            y=-Template.pinSpacing * (Template.pinCount - 1) / 2,
        )
        Modifier.Array(pinObject, 0, Template.pinSpacing, 0, Template.pinCount)
        Object.join(rootObject, *Global.getAll())
else:
    Object.RotateTo(rootObject, y="-90deg")
    caseLift = caseDepth / 2 + Template.backplateThickness
    bevelOffset = min(Template.pinThickness, Template.pinWidth) / 2
    Object.MoveBy(rootObject, z=caseLift)
    if Template.pinCount != 0:
        if Template.pinStyle in ("Rectangle", "Round", "T-shape"):
            pinObject = Mesh.LShape(
                Template.pinHeight + caseLift,
                Template.pinLength + bevelOffset,
                Template.pinThickness,
                Template.pinWidth,
                Template.pinBoostZ,
                Template.pinBoostWidth,
                Template.bendRadius,
                material=Template.pinMaterial,
            )
            Object.RotateTo(pinObject, z="180deg")
            Object.MoveBy(
                pinObject,
                x=Template.pinLength / 2 - bevelOffset / 2,
                z=-Template.pinHeight + Template.pinThickness / 2,
            )
            if Template.pinStyle == "Round":
                Modifier.Bevel(
                    pinObject,
                    width=bevelOffset,
                    segments=5,
                    limit_method="ANGLE",
                    angle_limit="30deg",
                )
                Material.Smooth(pinObject)
        elif Template.pinStyle == "S-shape":
            pinObject = Mesh.SShape(
                caseLift,
                Template.pinLength + bevelOffset,
                Template.pinThickness,
                Template.pinWidth,
                material=Template.pinMaterial,
            )
            Object.RotateTo(pinObject, z="180deg")
            Object.MoveBy(
                pinObject,
                x=Template.pinLength / 2 - bevelOffset / 2,
            )
        Object.MoveTo(
            pinObject,
            y=-Template.pinSpacing * (Template.pinCount - 1) / 2,
            z=Template.pinOffset,
        )
        Modifier.Array(pinObject, 0, Template.pinSpacing, 0, Template.pinCount)
        Object.join(rootObject, *Global.getAll())
        with Edit(rootObject) as edit:
            edit.MoveBy(
                x=-Template.pinLength + Template.pinThickness / 2,
                z=Template.pinHeight - Template.pinBoostZ - Template.pinThickness / 2,
            )
