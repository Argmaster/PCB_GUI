from src.py.bpyx import *


if Template.topSubcase.height:
    bpy_top = Mesh.Trapeze3D(
        Template.topSubcase.topX,
        Template.topSubcase.topY,
        Template.topSubcase.botX,
        Template.topSubcase.botY,
        Template.topSubcase.height,
        material=Template.topSubcase.material,
        location=(0, 0, Template.midSubcase.height + Template.botSubcase.height),
    )
    if Template.mark.depth and Template.mark.X and Template.mark.Y:
        if Template.mark.shape == "Circle":
            cutter = Mesh.Circle(Template.mark.X, Template.mark.Y, Template.mark.depth * 2)
        elif Template.mark.shape == "Rectangle":
            cutter = Mesh.Rectangle(
                Template.mark.X, Template.mark.Y, Template.mark.depth * 2
            )
        Object.MoveTo(
            cutter,
            Template.mark.offsetX,
            Template.mark.offsetY,
            Template.topSubcase.height
            + Template.midSubcase.height
            + Template.botSubcase.height
            - Template.mark.depth,
        )
        Modifier.Boolean(bpy_top, cutter)
        Global.delete(cutter)


if Template.midSubcase.height:
    Mesh.Rectangle(
        Template.midSubcase.X,
        Template.midSubcase.Y,
        Template.midSubcase.height,
        material=Template.midSubcase.material,
        location=(0, 0, Template.botSubcase.height),
    )


if Template.botSubcase.height:
    Mesh.Trapeze3D(
        Template.botSubcase.topX,
        Template.botSubcase.topY,
        Template.botSubcase.botX,
        Template.botSubcase.botY,
        Template.botSubcase.height,
        material=Template.botSubcase.material,
    )


if Template.label:
    Mesh.Text(
        Template.label,
        Template.fontPath,
        Template.fontSize,
        Template.fontDepth,
        material=Template.fontMaterial,
    )
    if Template.midSubcase.X < Template.midSubcase.Y:
        Transform.rotateZ("90deg")
    Transform.translate(
        z=Template.topSubcase.height
        + Template.midSubcase.height
        + Template.botSubcase.height
    )

if Template.pinX.count:
    if Template.pinX.style == "S-shape":
        bpy_obj = Mesh.SShape(
            Template.pinX.height,
            Template.pinX.length,
            Template.pinX.thickness,
            Template.pinX.width,
            material=Template.pinX.material,
        )
    elif Template.pinX.style == "L-shape":
        bpy_obj = Mesh.LShape(
            Template.pinX.height,
            Template.pinX.length,
            Template.pinX.thickness,
            Template.pinX.width,
            Template.pinX.boostZ,
            Template.pinX.boostWidth,
            Template.pinX.bendRadius,
            material=Template.pinX.material,
        )
        Transform.translate(
            z=-(
                Template.pinX.height
                - Template.midSubcase.height
                - Template.botSubcase.height
            )
        )
    elif Template.pinX.style == "Inset":
        pass

    Object.RotateTo(bpy_obj, z="180deg")
    begin_delta = (
        Template.midSubcase.Y - (Template.pinX.count - 1) * Template.pinX.spacing
    ) / 2
    Object.MoveTo(
        bpy_obj,
        x=Template.midSubcase.X / 2 + Template.pinX.length / 2,
        y=Template.midSubcase.Y / 2 - begin_delta,
    )
    Modifier.Array(bpy_obj, offset_y=-Template.pinX.spacing, count=Template.pinX.count)


if Template.pin_X.count:
    if Template.pin_X.style == "S-shape":
        bpy_obj = Mesh.SShape(
            Template.pin_X.height,
            Template.pin_X.length,
            Template.pin_X.thickness,
            Template.pin_X.width,
            material=Template.pin_X.material,
        )
    elif Template.pin_X.style == "L-shape":
        bpy_obj = Mesh.LShape(
            Template.pin_X.height,
            Template.pin_X.length,
            Template.pin_X.thickness,
            Template.pin_X.width,
            Template.pin_X.boostZ,
            Template.pin_X.boostWidth,
            Template.pin_X.bendRadius,
            material=Template.pin_X.material,
        )
        Transform.translate(
            z=-(
                Template.pin_X.height
                - Template.midSubcase.height
                - Template.botSubcase.height
            )
        )
    elif Template.pinX.style == "Inset":
        pass

    begin_delta = (
        Template.midSubcase.Y - (Template.pin_X.count - 1) * Template.pin_X.spacing
    ) / 2
    Object.MoveTo(
        bpy_obj,
        x=-(Template.midSubcase.X / 2 + Template.pin_X.length / 2),
        y=Template.midSubcase.Y / 2 - begin_delta,
    )
    Modifier.Array(
        bpy_obj, offset_y=-Template.pin_X.spacing, count=Template.pin_X.count
    )

if Template.pinY.count:
    if Template.pinY.style == "S-shape":
        bpy_obj = Mesh.SShape(
            Template.pinY.height,
            Template.pinY.length,
            Template.pinY.thickness,
            Template.pinY.width,
            material=Template.pinY.material,
        )
    elif Template.pinY.style == "L-shape":
        bpy_obj = Mesh.LShape(
            Template.pinY.height,
            Template.pinY.length,
            Template.pinY.thickness,
            Template.pinY.width,
            Template.pinY.boostZ,
            Template.pinY.boostWidth,
            Template.pinY.bendRadius,
            material=Template.pinY.material,
        )
        Transform.translate(
            z=-(
                Template.pinY.height
                - Template.midSubcase.height
                - Template.botSubcase.height
            )
        )
    elif Template.pinX.style == "Inset":
        pass

    Object.RotateTo(bpy_obj, z="-90deg")
    begin_delta = (
        Template.midSubcase.X - (Template.pinY.count - 1) * Template.pinY.spacing
    ) / 2
    Object.MoveTo(
        bpy_obj,
        y=Template.midSubcase.Y / 2 + Template.pinY.length / 2,
        x=Template.midSubcase.X / 2 - begin_delta,
    )
    Modifier.Array(bpy_obj, offset_x=-Template.pinY.spacing, count=Template.pinY.count)

if Template.pin_Y.count:
    if Template.pin_Y.style == "S-shape":
        bpy_obj = Mesh.SShape(
            Template.pin_Y.height,
            Template.pin_Y.length,
            Template.pin_Y.thickness,
            Template.pin_Y.width,
            material=Template.pin_Y.material,
        )
    elif Template.pin_Y.style == "L-shape":
        bpy_obj = Mesh.LShape(
            Template.pin_Y.height,
            Template.pin_Y.length,
            Template.pin_Y.thickness,
            Template.pin_Y.width,
            Template.pin_Y.boostZ,
            Template.pin_Y.boostWidth,
            Template.pin_Y.bendRadius,
            material=Template.pin_Y.material,
        )
        Transform.translate(
            z=-(
                Template.pin_Y.height
                - Template.midSubcase.height
                - Template.botSubcase.height
            )
        )
    elif Template.pinX.style == "Inset":
        pass
    
    Object.RotateTo(bpy_obj, z="90deg")
    begin_delta = (
        Template.midSubcase.X - (Template.pin_Y.count - 1) * Template.pin_Y.spacing
    ) / 2
    Object.MoveTo(
        bpy_obj,
        y=-(Template.midSubcase.Y / 2 + Template.pin_Y.length / 2),
        x=Template.midSubcase.X / 2 - begin_delta,
    )
    Modifier.Array(
        bpy_obj, offset_x=-Template.pin_Y.spacing, count=Template.pin_Y.count
    )

root = Mesh.Rectangle(0, 0, 0)
Object.join(root, *Global.getAll())